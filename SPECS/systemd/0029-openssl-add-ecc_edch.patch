From 9ec2ca0ce850cbb8e7851d83649d15c0f504252c Mon Sep 17 00:00:00 2001
From: Dan Streetman <ddstreet@ieee.org>
Date: Fri, 7 Jul 2023 10:11:07 -0400
Subject: [PATCH 29/44] openssl: add ecc_edch()

Add function to perform ECC EDCH.
---
 src/shared/openssl-util.c | 50 +++++++++++++++++++++++++++++++++++++++
 src/shared/openssl-util.h |  2 ++
 2 files changed, 52 insertions(+)

diff --git a/src/shared/openssl-util.c b/src/shared/openssl-util.c
index ab1b68ef8b..a7971baad6 100644
--- a/src/shared/openssl-util.c
+++ b/src/shared/openssl-util.c
@@ -858,6 +858,56 @@ int ecc_pkey_new(int curve_id, EVP_PKEY **ret) {
         return 0;
 }
 
+/* Perform ECDH to derive a ECC shared secret. */
+int ecc_ecdh(const EVP_PKEY *peerkey,
+             EVP_PKEY **ret_pkey,
+             void **ret_shared_secret,
+             size_t *ret_shared_secret_size) {
+
+        int curve_id, r;
+
+        assert(peerkey);
+        assert(ret_pkey);
+        assert(ret_shared_secret);
+        assert(ret_shared_secret_size);
+
+        r = ecc_pkey_to_curve_x_y(peerkey, &curve_id, NULL, NULL, NULL, NULL);
+        if (r < 0)
+                return r;
+
+        _cleanup_(EVP_PKEY_freep) EVP_PKEY *pkey = NULL;
+        r = ecc_pkey_new(curve_id, &pkey);
+        if (r < 0)
+                return r;
+
+        _cleanup_(EVP_PKEY_CTX_freep) EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
+        if (!ctx)
+                return log_openssl_errors("Failed to create new EVP_PKEY_CTX");
+
+        if (EVP_PKEY_derive_init(ctx) <= 0)
+                return log_openssl_errors("Failed to initialize EVP_PKEY_CTX");
+
+        if (EVP_PKEY_derive_set_peer(ctx, (EVP_PKEY*) peerkey) <= 0)
+                return log_openssl_errors("Failed to set ECC derive peer");
+
+        size_t shared_secret_size;
+        if (EVP_PKEY_derive(ctx, NULL, &shared_secret_size) <= 0)
+                return log_openssl_errors("Failed to get ECC shared secret size");
+
+        _cleanup_free_ void *shared_secret = malloc(shared_secret_size);
+        if (!shared_secret)
+                return log_oom_debug();
+
+        if (EVP_PKEY_derive(ctx, (unsigned char*) shared_secret, &shared_secret_size) <= 0)
+                return log_openssl_errors("Failed to derive ECC shared secret");
+
+        *ret_pkey = TAKE_PTR(pkey);
+        *ret_shared_secret = TAKE_PTR(shared_secret);
+        *ret_shared_secret_size = shared_secret_size;
+
+        return 0;
+}
+
 int pubkey_fingerprint(EVP_PKEY *pk, const EVP_MD *md, void **ret, size_t *ret_size) {
         _cleanup_(EVP_MD_CTX_freep) EVP_MD_CTX* m = NULL;
         _cleanup_free_ void *d = NULL, *h = NULL;
diff --git a/src/shared/openssl-util.h b/src/shared/openssl-util.h
index e3661f015a..8807e2dd4e 100644
--- a/src/shared/openssl-util.h
+++ b/src/shared/openssl-util.h
@@ -100,6 +100,8 @@ int ecc_pkey_to_curve_x_y(const EVP_PKEY *pkey, int *ret_curve_id, void **ret_x,
 
 int ecc_pkey_new(int curve_id, EVP_PKEY **ret);
 
+int ecc_ecdh(const EVP_PKEY *peerkey, EVP_PKEY **ret_pkey, void **ret_shared_secret, size_t *ret_shared_secret_size);
+
 int pubkey_fingerprint(EVP_PKEY *pk, const EVP_MD *md, void **ret, size_t *ret_size);
 
 #else
-- 
2.34.1

